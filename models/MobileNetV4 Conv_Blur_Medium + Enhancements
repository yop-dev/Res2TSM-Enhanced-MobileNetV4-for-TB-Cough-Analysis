import timm
import torch.nn as nn
from your_dataset_and_utils_imports import Res2TSMBlock, Res2NetBlock, TemporalShift

class MobileNetV4_Base(nn.Module):
    def __init__(self, model_key, dropout=0.3):
        super().__init__()
        # load pretrained conv_blur_medium backbone
        backbone = timm.create_model(model_key, pretrained=True, features_only=True)
        C = backbone.feature_info.channels()[-1]
        self.backbone = backbone
        self.global_pool = nn.AdaptiveAvgPool2d((1,1))
        self.fc = nn.Sequential(
            nn.Dropout(dropout),
            nn.Linear(C,1),
            nn.Sigmoid()
        )

    def forward(self, x):
        feat = self.backbone(x)[-1]
        out  = self.global_pool(feat).view(feat.size(0), -1)
        return self.fc(out).squeeze(1)

class MobileNetV4_TSM(MobileNetV4_Base):
    def __init__(self, model_key, shift_div=8, dropout=0.3):
        super().__init__(model_key, dropout)
        C = self.backbone.feature_info.channels()[-1]
        self.temporal_shift = TemporalShift(C, shift_div)

    def forward(self, x):
        feat = self.backbone(x)[-1]
        feat = self.temporal_shift(feat)
        return super().forward_from_feat(feat)

class MobileNetV4_Res2Net(MobileNetV4_Base):
    def __init__(self, model_key, scale=4, dropout=0.3):
        super().__init__(model_key, dropout)
        C = self.backbone.feature_info.channels()[-1]
        self.res2net = Res2NetBlock(C, scale)

    def forward(self, x):
        feat = self.backbone(x)[-1]
        feat = self.res2net(feat)
        return super().forward_from_feat(feat)

class MobileNetV4_Res2TSM(MobileNetV4_Base):
    def __init__(self, model_key, scale=4, shift_div=8, dropout=0.3):
        super().__init__(model_key, dropout)
        C = self.backbone.feature_info.channels()[-1]
        self.res2tsm = Res2TSMBlock(C, scale, shift_div)

    def forward(self, x):
        feat = self.backbone(x)[-1]
        feat = self.res2tsm(feat)
        return super().forward_from_feat(feat)
